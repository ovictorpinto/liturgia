apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.github.triplet.play'

repositories {
    maven { url "https://maven.google.com" }
    maven { url 'https://maven.fabric.io/public' }
    jcenter()
    mavenCentral()
}

android {
    compileSdkVersion 27
    signingConfigs {
        config {
            storeFile file('/Users/victorpinto/OneDrive/Java/liturgia/liturgia.keystore')
            storePassword "${LITURGIA_STORE_PASS}"
            keyAlias 'liturgia'
            keyPassword "${LITURGIA_KEY_PASS}"
        }
    }
    playAccountConfigs {
        defaultAccountConfig {
            jsonFile = file('/Users/victorpinto/OneDrive/Java/verdinho/Verdinho-playAccount.json')
        }
    }
    defaultConfig {
        applicationId "br.com.r29tecnologia.liturgia"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 3
        versionName "0.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField("String", "LITURGIA_BASE_URL", "\"" + LITURGIA_BASE_URL + "\"")
        signingConfig signingConfigs.config
        playAccountConfig = playAccountConfigs.defaultAccountConfig
        play {
            track = 'production'
        }
        manifestPlaceholders = [io_fabric_ApiKey : LITURGIA_FABRIC_API_KEY]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def supportVersion = "27.0.2"

dependencies {
    implementation 'com.android.support:support-v4:27.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile "com.android.support:design:${supportVersion}"
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.3.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:${supportVersion}"
    implementation "com.android.support:recyclerview-v7:${supportVersion}"
    implementation "com.android.support:cardview-v7:${supportVersion}"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}


//https://github.com/plastiv/CrashlyticsDemo
afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: LITURGIA_FABRIC_API_SECRET)
            entry(key: "apiKey", value: LITURGIA_FABRIC_API_KEY)
        }
    }
}
